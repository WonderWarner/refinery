import builtin::view.
import builtin::annotations.
 
#pred objective(boolean minimize).
#pred crossover().
#pred violation().

@color(hex="#beaed4")
abstract class SocialBeing {
    @crossover
 	SocialBeing[0..5] friend
}
@crossover
@color(hex="#377eb8")
class Person extends SocialBeing {
    @crossover
    Dog[] pet opposite owner
}
@color(hex="#e5c494")
@crossover
class Dog extends SocialBeing {
    @crossover
    Person owner opposite pet
}

% Noone can be their own friends
propagation rule noSelf(a) ==> !friend(a,a).

% A pet and it's owner should be true friends
pred trueFriends(SocialBeing sb1, SocialBeing sb2) <->
    friend(sb1, sb2),
    friend(sb2, sb1).

@objective(true)
pred ownerAndPetAreNotFriends(Person p, Dog d) <->
    pet(p, d),
    !trueFriends(p, d).

% A Person is good to have at least 2 true friends
@objective(true)
pred notEnoughFriendsForPerson(Person p) <->
    !hasAtLeast2Friends(p, _, _).

pred hasAtLeast2Friends(Person p, SocialBeing a1, SocialBeing a2) <->
    a1 != a2,
    trueFriends(p, a1),
    trueFriends(p, a2).

% Friend triangles should be minimized / maximized
% @objective(true)
@objective(false)
pred beingInFriendTriangle(SocialBeing sb) <->
    friendTriangle(sb, _, _).

pred friendTriangle(SocialBeing sb1, SocialBeing sb2, SocialBeing sb3) <->
    trueFriends(sb1, sb2),
    trueFriends(sb2, sb3),
    trueFriends(sb3, sb1).

@objective(false)
pred numberOfNodes(n) <->
    node(n).

scope node = 18..22.